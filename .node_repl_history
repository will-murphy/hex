let mohex = new Mohex();
Mohex
let {Mohex} = require('./mohex.js');
let {Mohex} = require('./mohex.js')
let {Mohex} = require('mohex.js')
mohex.playMoves([{color: "white", move: 'b1'},{color: "white", move: 'b2'},{color: "white", move: 'b3'},{color: "white", move: 'b4'},{color: "white", move: 'b5'},{color: "black", move: 'b6'},{color: "black", move: 'b7'},{color: "black", move: 'b8'},{color: "black", move: 'b9'},{color: "black", move: 'b10'}], function () { console.log(JSON.stringify(mohex.log)); });
mohex
mohex.playMoves([{color: "white", move: 'a1'},{color: "white", move: 'a2'},{color: "white", move: 'a3'},{color: "white", move: 'a4'},{color: "white", move: 'a5'},{color: "black", move: 'a6'},{color: "black", move: 'a7'},{color: "black", move: 'a8'},{color: "black", move: 'a9'},{color: "black", move: 'a10'}], function () { console.log('done'); });
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once('data', completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once('data', completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once('data', completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once('data', completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex.playMoves([{color: "white", move: 'a1'},{color: "white", move: 'a2'},{color: "white", move: 'a3'},{color: "white", move: 'a4'},{color: "white", move: 'a5'},{color: "black", move: 'a6'},{color: "black", move: 'a7'},{color: "black", move: 'a8'},{color: "black", move: 'a9'},{color: "black", move: 'a10'}], function () { console.log('done'); });
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once(completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
mohdex
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once(completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once(completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once(completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once(completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex.playMoves([{color: "white", move: 'a1'},{color: "white", move: 'a2'},{color: "white", move: 'a3'},{color: "white", move: 'a4'},{color: "white", move: 'a5'},{color: "black", move: 'a6'},{color: "black", move: 'a7'},{color: "black", move: 'a8'},{color: "black", move: 'a9'},{color: "black", move: 'a10'}], () => console.log('done'));
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMovesHelper(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMovesHelper = function (moves, completed) {
}
        this.process.stdout.once(completed));
    this.playMovesHelper(moves, () =>
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
clear()
clear
mohex
mohex.playMoves([{color: "white", move: 'a1'},{color: "white", move: 'a2'},{color: "white", move: 'a3'},{color: "white", move: 'a4'},{color: "white", move: 'a5'},{color: "black", move: 'a6'},{color: "black", move: 'a7'},{color: "black", move: 'a8'},{color: "black", move: 'a9'},{color: "black", move: 'a10'}], console.log.bind(console));
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMoves(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMoves(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
mohex.playMoves([{color: "white", move: 'a1'},{color: "white", move: 'a2'},{color: "white", move: 'a3'},{color: "white", move: 'a4'},{color: "white", move: 'a5'},{color: "black", move: 'a6'},{color: "black", move: 'a7'},{color: "black", move: 'a8'},{color: "black", move: 'a9'},{color: "black", move: 'a10'}], console.log.bind(console));
mohex.playMoves([{color: "white", move: 'a1'},{color: "white", move: 'a2'},{color: "white", move: 'a3'},{color: "white", move: 'a4'},{color: "white", move: 'a5'},{color: "black", move: 'a6'},{color: "black", move: 'a7'},{color: "black", move: 'a8'},{color: "black", move: 'a9'},{color: "black", move: 'a1'0}], console.log.bind(console));
mohex
mohex.playMoves([{color: "white", move: 1},{color: "white", move: 2},{color: "white", move: 3},{color: "white", move: 4},{color: "white", move: 5},{color: "black", move: 6},{color: "black", move: 7},{color: "black", move: 8},{color: "black", move: 9},{color: "black", move: 10}], console.log.bind(console));
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMoves(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMoves(moves.slice(1), completed));
        this.playMove(moves[0].color, moves[0].move, () =>
    } else {
        completed();
    if (moves.length === 0) {
Mohex.prototype.playMoves = function (moves, completed) {
}
    });
        });
            completed();
        self.process.stdout.once('data', function () {
    self.input('play ' + self.humanColor + ' ' + move, function () {
    let self = this;
Mohex.prototype.playHumanMove = function (move, completed) {
}
    this.process.stdin.write(string + '\n', completed);
    console.log(string);
    console.log('Inputting...');
Mohex.prototype.input = function (string, completed) {
}
    return string.match(/^=\ (..)\n\n$/)[1];
Mohex.stdoutToMove = function (string) {
}
    return String(Math.floor(Math.random() * 1e10));
Mohex.seed = function () {
}
    });
        self.closedCode = code;
        self.closed = true;
    self.process.on('close', function (code) {
    self.closed = false;
    });
        self.log.stdout.push(data.toString());
    self.process.stdout.on('data', function (data) {
    });
        self.log.stderr.push(data.toString());
    self.process.stderr.on('data', function (data) {
    
    };
        stdout: [],
        stderr: [],
    self.log = {
    self.process = spawn('./benzene/mohex11', ['--seed', Mohex.seed()]);
    self.computerColor = 'white';
    self.humanColor = 'black';
    
    let self = this;
function Mohex() {
let spawn = require('child_process').spawn;
}
    return thing[thing.length - 1];
function last(thing) {
mohex
let mohex = new Mohex();
}
    });
        });
            completed(Mohex.stdoutToMove(last(self.log.stdout)));
        self.process.stdout.once('data', function () {
    self.input('genmove ' + self.computerColor, function () {
Mohex.prototype.playComputerMove = function (completed) {
}
    this.input('play ' + color + ' ' + move, completed);
Mohex.prototype.playMove = function (color, move, completed) {
}
    }
            this.playMoves(moves.slice(1), completed));ves[0].color, moves[0].move, () => else { {